/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.transire;


import com.thingmagic.ReaderException;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.sql.Timestamp;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import org.eclipse.paho.client.mqttv3.MqttClient;
import org.eclipse.paho.client.mqttv3.MqttConnectOptions;
import org.eclipse.paho.client.mqttv3.MqttException;
import org.eclipse.paho.client.mqttv3.MqttMessage;
import org.eclipse.paho.client.mqttv3.persist.MqttDefaultFilePersistence;

/**
 *
 * @author  gabriel montenegro villacrez
 */
public class PortalRFID extends javax.swing.JFrame {

    private MqttClient mqttClient;
    int qos = 2;
    String brokerUrl = "tcp://192.168.100.188:1883";
    String clientId = "ClienteLeitorMercury";
    boolean ssl = false;
    private MqttConnectOptions conOpt;

    private boolean clean;
    private final String password = null;
    private String userName = null;
    private final DefaultListModel modelLista = new DefaultListModel();
   
    
    ItbamLeitorEthernet leitorETH = new ItbamLeitorEthernet(this);
    ItbamLeitorUSB leitorUSB = new ItbamLeitorUSB(this);

   
    public void DesconectarEthernet() throws ReaderException {
        
        leitorETH.Desconectar();
        //leitorETH.zerarTagsLidas();
 
    }

    public void DesconectarUSB() throws ReaderException {
        leitorUSB.Desconectar();
        leitorUSB.zerarHashSet();
        
    }

    /**
     * Creates new form LeitorGenerico
     */
    public PortalRFID() {
        initComponents();

       
        this.jlLista.setModel(modelLista);
       
        jcbbLeitor.removeAllItems();
        jcbbLeitor.addItem("Selecionar");
        jcbbLeitor.addItem("USB");
        jcbbLeitor.addItem("Ethernet");
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        jcbbLeitor.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent event) {

                if (event.getStateChange() == ItemEvent.SELECTED) {
                    int op = jcbbLeitor.getSelectedIndex();
                   
                    switch (op) {
                        case 0:// Selecionar
                            break;
                        case 1:// USB
                            //DesconectarEthernet();
                            break;
                        case 2: // Ethernet
                           //DesconectarUSB();
                            break;
                    }
                }

            }
        });
    }

    public void log(String message) {
        this.modelLista.addElement(message);
        //auto scroll da lista de elementos.
         this.jlLista.ensureIndexIsVisible(this.jlLista.getModel().getSize()-1);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        javax.swing.JButton jbConectar = new javax.swing.JButton();
        jbDesconectar = new javax.swing.JButton();
        jbAtualizar = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jlLista = new javax.swing.JList<String>();
        jcbbLeitor = new javax.swing.JComboBox<String>();

        setTitle("Leitor Portal RFID");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Area de Configuração"));

        jbConectar.setText("Conectar");
        jbConectar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbConectarActionPerformed(evt);
            }
        });

        jbDesconectar.setText("Desconectar");
        jbDesconectar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbDesconectarActionPerformed(evt);
            }
        });

        jbAtualizar.setText("Limpar");
        jbAtualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAtualizarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(57, Short.MAX_VALUE)
                .addComponent(jbConectar, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39)
                .addComponent(jbAtualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addComponent(jbDesconectar, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbConectar, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbAtualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbDesconectar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(46, 46, 46))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Status"));

        jlLista.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        jlLista.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane3.setViewportView(jlLista);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 483, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(22, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jcbbLeitor.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(93, 93, 93)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(297, 297, 297)
                            .addComponent(jcbbLeitor, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(51, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jcbbLeitor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(54, 54, 54)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(159, 159, 159))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void ConectarMqtt() {
        try {
            String tmpDir = System.getProperty("java.io.tmpdir");
            MqttDefaultFilePersistence dataStore = new MqttDefaultFilePersistence(tmpDir);

            conOpt = new MqttConnectOptions();
            conOpt.setCleanSession(clean);
            if (password != null) {
                conOpt.setPassword(this.password.toCharArray());
            }
            if (userName != null) {
                conOpt.setUserName(this.clientId);
            }
        // Construct an MQTT blocking mode client
            mqttClient = new MqttClient(brokerUrl, clientId, dataStore);
        // Set this wrapper as the callback handler
          //  mqttClient.setCallback(this);
            mqttClient.connect(conOpt);
            log("Connected to " + brokerUrl + " with client ID " + mqttClient.getClientId());
        } catch (MqttException e) {
            log("[Exception]Conectar: " + e.getMessage());

        }
    }
    
    public void desconectarMqtt() {
        try {
            mqttClient.disconnect();
        } catch (MqttException ex) {
            log("[Exception]desconectar: " + ex.getMessage());
        }
        log("Disconnected");

    }
    
    public void ConectarUSB() {
        //ConectarMqtt();
        try {
            leitorUSB.Conectar();
        } catch (ReaderException ex) {
            log(ex.getMessage());
        }

    }

    public void ConectarEthernet() throws ReaderException, InterruptedException, Exception 
    {
       //ConectarMqtt();
       leitorETH.Conectar();
    }


    private void jbConectarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbConectarActionPerformed

        int op = jcbbLeitor.getSelectedIndex();
        
        switch (op) 
        {
            case 0:// Selecionar

                break;
            case 1://USB
                ConectarUSB();
                break;

            case 2:{
                try 
                {
                    //Ethernet
                    ConectarEthernet();
                    
                }
                catch (ReaderException | InterruptedException ex) 
                {
                    //Logger.getLogger(PortalRFID.class.getName()).log(Level.SEVERE, null, ex);
                    log(ex.getMessage());
                } catch (Exception ex) {
                Logger.getLogger(PortalRFID.class.getName()).log(Level.SEVERE, null, ex);
            }
            }
            
            break;


        }

    }//GEN-LAST:event_jbConectarActionPerformed

    private void jbDesconectarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbDesconectarActionPerformed
        int op = jcbbLeitor.getSelectedIndex();
        
        switch (op) {
            case 0:// Selecionar
                break;
            case 1:{
            try {
                // USB
                DesconectarUSB();
            } catch (ReaderException ex) {
                Logger.getLogger(PortalRFID.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
                //desconectarMqtt();
                break;
            case 2:{
            try {
                //Ethernet
                DesconectarEthernet();
                leitorETH.zerarTagsLidas();
                //leitorETH.
            } catch (ReaderException ex) {
                Logger.getLogger(PortalRFID.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
                //desconectarMqtt();
                break;

        }
    }//GEN-LAST:event_jbDesconectarActionPerformed

    private void jbAtualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAtualizarActionPerformed
        this.modelLista.clear();
        leitorUSB.zerarHashSet();
        leitorETH.zerarTagsLidas();
        
        
    }//GEN-LAST:event_jbAtualizarActionPerformed

    public void publish(String topicName, int qos, byte[] payload) {
        try {
            String time = new Timestamp(System.currentTimeMillis()).toString();
        //   log("Publishing at: " + time + " to topic \"" + topicName + "\" qos " + qos);

            MqttMessage message = new MqttMessage(payload);
            message.setQos(qos);

            mqttClient.publish(topicName, message);
        } catch (MqttException e) {
            log("[Exception]publish: " + e.getMessage());
        }

    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PortalRFID.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PortalRFID.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PortalRFID.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PortalRFID.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PortalRFID().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton jbAtualizar;
    private javax.swing.JButton jbDesconectar;
    private javax.swing.JComboBox<String> jcbbLeitor;
    public javax.swing.JList<String> jlLista;
    // End of variables declaration//GEN-END:variables
    
 
}
